#! /usr/bin/env python3


"""
COMP3311
23T1
Assignment 2
Pokemon Database

Written by: Shakira Li z5339356
Written on: 09 April 2023

My Pokemon

Create your very own Pokemon
"""


import sys
import psycopg2
import helpers
from random import Random


### Constants
USAGE = f"Usage: {sys.argv[0]} <Seed>"


### Globals
db = None
Seed = None
rng = None


### Command-line args
if len(sys.argv) != 2:
    print(USAGE, file=sys.stderr)
Seed = int(sys.argv[1]) # read the seed from the command line
rng  = Random(Seed)     # set the seed for the python random number generator

# `rng` is a python Random number generator
# `rng.random()` returns a random float between 0 and 1
# `rng.randint(a, b)` returns a random integer between a and b (inclusive)

# `SELECT setseed(seed);` sets the postgres random seed to `seed`
# `SELECT * FROM Table ORDER BY random() LIMIT 5;` gives 5 random rows from the table `Table`
# `SELECT setseed(seed);` should be used once, before any calls to random(), with the a random number generated by `rng.random()`

### Helper functions
def menu(items: list[str]) -> int:
    """
    Given a list of strings,
    print a numbered menu
    and return the user's selection.
    """
    padding = len(str(len(items)))
    print(f"Select an option from the menu below by entering its number:")
    for i, item in enumerate(items):
        print(f"{i+1:{padding}}) {item}")
    ret = int(input("> Selection: ")) - 1
    if not sys.stdin.isatty():
        print(f"{ret+1}")
    print()
    return ret

def randomise_seed():
    # sets the postgres random seed to a random number generated by rng.random()
    set_seed = """ SELECT setseed(%s) """
    cur.execute(set_seed, [rng.random(), ])
    
def game_selection() -> str:
    # randomly select 10 options from the Games table
    games_qry = """
    SELECT G.Name 
    	FROM Games G
    	ORDER BY random() 
    	LIMIT 10
    """
    
    # run sql
    cur.execute(games_qry)
    
    # creates a list of games to input into menu function
    games_list = []
    for games in cur.fetchall():
    	games_list.append(games[0])
    	
    # call menu function to display game selection
    selected_game = menu(games_list)
    
    return games_list[selected_game]
    
def pokemon_selection(selected_game) -> str:
	# randomly select 10 options from the Pokemon table
	# information stored in each index:
	    # [0] = Pokemon Name
	    # [1] = Pokemon Species
	    # [2] = Pokemon Type/s
	    # [3] = Pokemon's National ID
	    # [4] = Pokemon's Regional ID
    pokemon_qry = """
    SELECT P.Name, P.Species, (SELECT * FROM Find_Types(P.Name, ' + ')), 
           (PK.National_ID).Pokedex_Number, PK.Regional_ID
    	FROM Pokemon P 
    		JOIN Pokedex PK ON P.ID = PK.National_ID
    		JOIN Games G ON PK.Game = G.ID
    	WHERE G.Name = %s
    	ORDER BY random() 
    	LIMIT 10
    """
    
    # run sql
    cur.execute(pokemon_qry, [selected_game, ])
    pokemon_info_list = cur.fetchall()
    
    # creates a list of Pokemon names to input into menu function
    pokemon_list = []
    for pokemon in pokemon_info_list:
    	pokemon_list.append(pokemon[0])
    
    # call menu function to display Pokemon selection
    selected_pokemon = menu(pokemon_list)
    
    return pokemon_info_list[selected_pokemon]
    
def ability_selection(selected_pokemon) -> str:
	# select all known abilities from the Abilities table
	abilities_qry = """
	SELECT A.Name
		FROM Abilities A
			JOIN Knowable_Abilities KA on A.ID = KA.Knows
			JOIN Pokemon P on KA.Known_By = P.ID
		WHERE P.Name = %s
		ORDER BY A.ID
		LIMIT 10
	"""
	
	# run sql
	cur.execute(abilities_qry, [selected_pokemon, ])
	
	# creates a list of abilities to input into menu function
	abilities_list = []
	for abilities in cur.fetchall():
		abilities_list.append(abilities[0])
	
	if abilities_list != []:
		# call menu function to display abilities selection
		selected_ability = menu(abilities_list)
	else:
		return 'None'
	
	return abilities_list[selected_ability]
	
def moves_selection(selected_game, selected_pokemon) -> list[str]:
	# select all learnable moves and their information from the Moves table
	# information stored in each index:
	    # [0] = Move Name
	    # [1] = Move Type
	    # [2] = Move Category
	    # [3] = Move Power
	    # [4] = Move Accuracy
	moves_qry = """
	SELECT 
		DISTINCT ON (M.ID) M.Name, T.Name, M.Category, M.Power, M.Accuracy
		FROM Moves M
		    JOIN Types T ON M.Of_Type = T.ID
			JOIN Learnable_Moves LM on M.ID = LM.Learns
			JOIN Pokemon P on LM.Learnt_By = P.ID
			JOIN Games G on LM.Learnt_In = G.ID
			JOIN Requirements R on LM.Learnt_When = R.ID
		WHERE P.Name = %s and G.Name = %s and R.Assertion LIKE %s
		ORDER BY M.ID
	"""
	
	# run sql
	cur.execute(moves_qry, [selected_pokemon, selected_game, 'Level:%'])
	moves_info_list = cur.fetchall()
	
	# creates a list of move names to input into menu function
	moves_list = []
	for moves in moves_info_list:
		moves_list.append(moves[0])
		
	# call menu function to display available moves selection
	selected_moves_list = []
	
	for i in range(4):
		selected_move = menu(moves_list)
		selected_moves_list.append(moves_info_list[selected_move])
		moves_info_list.remove(moves_info_list[selected_move])
		moves_list.remove(moves_list[selected_move])
		if moves_list == []:
			break
	
	return selected_moves_list

def print_info(selected_game, selected_pokemon, selected_ability, selected_moves):
    print("Here is your new Pokemon (from Pokemon %s):" % selected_game)
    print("\n")
    
    print("Name: %s" % selected_pokemon[0])
    print("Species: %s" % selected_pokemon[1])
    print("Type: %s" % (selected_pokemon[2]))
    print("Pokedex Number: %s (%s)" % (selected_pokemon[4], selected_pokemon[3]))
    print("\n")
    
    print("Ability: %s" % selected_ability)
    print("\n")
    
    print("Moves:")
    for moves in selected_moves: 
        print("\t%s\t[%s]\t(Category: %s, Power: %s, Accuracy: %s)" % 
             (moves[0], moves[1], moves[2], moves[3], moves[4]))       
    print("\n")
    
def main():
    # sets the postgres random seed
    randomise_seed()
    
    # selects the game the Pokemon will be coming from
    selected_game = game_selection()
    
    # selects the Pokemon to be played with
    selected_pokemon = pokemon_selection(selected_game)
    
    # selects the ability the Pokemon will have
    selected_ability = ability_selection(selected_pokemon[0])
    
    # selects the moves the Pokemon will learn
    selected_moves = moves_selection(selected_game, selected_pokemon[0])

    # prints the new Pokemon's information
    print_info(selected_game, selected_pokemon, selected_ability, selected_moves)

if __name__ == '__main__':
    try:
        db = psycopg2.connect(dbname="ass2")
        cur = db.cursor()
        main()
    except psycopg2.Error as err:
        print("DB error: ", err)
    except Exception as err:
        print("Internal Error: ", err)
        raise err
    finally:
        if cur is not None:
            cur.close()
        if db is not None:
            db.close()
    sys.exit(0)
